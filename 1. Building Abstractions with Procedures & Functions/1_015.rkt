#lang sicp

(define (cube x) (* x x x))


;a.  How many times is the procedure p applied when (sine 12.15) is evaluated?
(define (p x)
  (- (* 3 x) (* 4 (cube x))))
(define (sine-with-counter angle counter)
  (display "Current counter is: ") (display counter) (newline)

  (if (not (> (abs angle) 0.1))
      angle
      (p (sine-with-counter (/ angle 3.0) (+ counter 1)))))
(sine-with-counter 12.15 1)
(newline)
; What is the order of growth in space and number of steps (as a function of a)
; used by the process generated by the sine procedure when (sine a) is evaluated?

(define (sine-display-n-steps angle counter)
  (if (not (> (abs angle) 0.1))
      (begin
        (display " Counter: ")  (display counter) (display " | ")
        angle)
      (p (sine-display-n-steps (/ angle 3.0) (+ counter 1)))))

(sine-display-n-steps 12.15 1 )

; Let's see what happens with different values for a
(define (iter-sine start-val inc-by max-start-val)
  (display "Start val: ") (display start-val)  (newline)
  (sine-display-n-steps start-val 1)
  (if (<= start-val max-start-val)
      (iter-sine (+ start-val inc-by) inc-by max-start-val)))

(iter-sine 1 1 10000)
; From this you can clearly see a logarithmic growth in the number of steps